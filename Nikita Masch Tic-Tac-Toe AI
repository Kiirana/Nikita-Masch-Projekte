
num = 0
global i
i = 0
global bestmove
bestmove = 0
global scor
scor = 0
board = {1: ' ', 2: ' ', 3: ' ',
         4: ' ', 5: ' ', 6: ' ',
         7: ' ', 8: ' ', 9: ' '}
print('Tic Tac Toe Layout')


def printf(board):
    print(' ', board[1], board[2], board[3], ' ', sep='|')
    print('', '-------')
    print(' ', board[4], board[5], board[6], ' ', sep='|')
    print('', '-------')
    print(' ', board[7], board[8], board[9], ' ', sep='|')
    print('\n')


def printexample(board):
    print(' ', 1, 2, 3, ' ', sep='|')
    print('', '-------')
    print(' ', 4, 5, 6, ' ', sep='|')
    print('', '-------')
    print(' ', 7, 8, 9, ' ', sep='|')
    print('\n')


#printexample(board)


def check(position, board):
    if board[position] == ' ':

        return True

    else:

        return False


def outcomes():
    count = 0
    while count != 1:

        if board[1] == 'X' and board[4] == 'X' and board[7] == 'x':
            count = count + 1
            print("X WON !")
            return True

        if board[2] == 'X' and board[5] == 'X' and board[8] == 'X':
            count = count + 1
            print("X WON ! ")
            return True

        if board[3] == 'X' and board[6] == 'X' and board[9] == 'X':
            count = count + 1
            print("X WON !")
            return True

        if board[1] == 'X' and board[2] == 'X' and board[3] == 'X':
            count = count + 1
            print("X WON !")
            return True

        if board[4] == 'X' and board[5] == 'X' and board[6] == 'X':
            count = count + 1
            print("X WON !")
            return True

        if board[7] == 'X' and board[8] == 'X' and board[9] == 'X':
            count = count + 1
            print("X WON !")
            return True

        if board[1] == 'X' and board[5] == 'X' and board[9] == 'X':
            count = count + 1
            print("X WON !")
            return True

        if board[7] == 'X' and board[5] == 'X' and board[3] == 'X':
            count = count + 1
            print("X WON !")
            return True

        if board[1] == 'O' and board[4] == 'O' and board[7] == 'O':
            count = count + 1
            print("O WON !")
            return True

        if board[2] == 'O' and board[5] == 'O' and board[8] == 'O':
            count = count + 1
            print("O WON !")
            return True

        if board[3] == 'O' and board[6] == 'O' and board[9] == 'O':
            count = count + 1
            print("O WON !")
            return True

        if board[1] == 'O' and board[2] == 'O' and board[3] == 'O':
            count = count + 1
            print("O WON !")
            return True

        if board[4] == 'O' and board[5] == 'O' and board[6] == 'O':
            count = count + 1
            print("O WON !")
            return True

        if board[7] == 'O' and board[8] == 'O' and board[9] == 'O':
            count = count + 1
            print("O WON !")
            return True

        if board[1] == 'O' and board[5] == 'O' and board[9] == 'O':
            count = count + 1
            print("O WON !")
            return True

        if board[7] == 'O' and board[5] == 'O' and board[3] == 'O':
            count = count + 1
            print("O WON !")
            return True

        if (board[1] == 'O' or board[1] == 'X') and (board[2] == 'O' or board[2] == 'X') and (
                board[3] == 'O' or board[3] == 'X') and (board[4] == 'O' or board[4] == 'X') and (
                board[5] == 'O' or board[5] == 'X') and (board[6] == 'O' or board[6] == 'X') and (
                board[7] == 'O' or board[7] == 'X') and (board[8] == 'O' or board[8] == 'X') and (
                board[9] == 'O' or board[9] == 'X'):
            print("It is a DRAW !")

            return True
        else:
            return False

def clear():
    for i in board.keys():
        board[i] = ' '
def draw():
    if (board[1] == 'O' or board[1] == 'X') and (board[2] == 'O' or board[2] == 'X') and (
            board[3] == 'O' or board[3] == 'X') and (board[4] == 'O' or board[4] == 'X') and (
            board[5] == 'O' or board[5] == 'X') and (board[6] == 'O' or board[6] == 'X') and (
            board[7] == 'O' or board[7] == 'X') and (board[8] == 'O' or board[8] == 'X') and (
            board[9] == 'O' or board[9] == 'X'):

        return True
    else:
        return False


def winhuman():
    if board[1] == 'X' and board[4] == 'X' and board[7] == 'x':
        return True

    elif board[2] == 'X' and board[5] == 'X' and board[8] == 'X':
        return True

    elif board[3] == 'X' and board[6] == 'X' and board[9] == 'X':
        return True

    elif board[1] == 'X' and board[2] == 'X' and board[3] == 'X':
        return True

    elif board[4] == 'X' and board[5] == 'X' and board[6] == 'X':
        return True

    elif board[7] == 'X' and board[8] == 'X' and board[9] == 'X':
        return True

    elif board[1] == 'X' and board[5] == 'X' and board[9] == 'X':
        return True

    elif board[7] == 'X' and board[5] == 'X' and board[3] == 'X':

        return True
    else:
        return False


def winAI():
    if board[1] == 'O' and board[4] == 'O' and board[7] == 'O':
        return True

    elif board[2] == 'O' and board[5] == 'O' and board[8] == 'O':
        return True

    elif board[3] == 'O' and board[6] == 'O' and board[9] == 'O':
        return True

    elif board[1] == 'O' and board[2] == 'O' and board[3] == 'O':
        return True

    elif board[4] == 'O' and board[5] == 'O' and board[6] == 'O':
        return True

    elif board[7] == 'O' and board[8] == 'O' and board[9] == 'O':
        return True

    elif board[1] == 'O' and board[5] == 'O' and board[9] == 'O':
        return True

    elif board[7] == 'O' and board[5] == 'O' and board[3] == 'O':
        return True
    else:
        return  False



def insert(num, player):
    if check(num, board) == True:
        if player == 'X':
            board[num] = 'X'
        if player == 'O':
            board[num] = 'O'


def sethuman():
    nump = int(input('enter number'))
    if (board[nump] != ' '):
        print ('square not available')
        nump = int(input('enter number'))
        insert(nump, 'X')
    insert(nump, 'X')



def ai():

    move = 0
    bestscore = -1000
    for key in board.keys():

        if board[key] == ' ':
            board[key] = 'O'

            scor = minmax(board,0,False)
            board[key] = ' '

            a = (scor,bestscore)
            x = max(a)
            if x == scor:
                bestscore = x
                move = key

    insert(move,'O')
    return True


def minmax(position,depth,maxiplay):
    if draw() == True:
        return 0
    if winAI() == True:
        return 1
    if winhuman() == True:
        return -1

    if (maxiplay):
        bestscore = -50
        for i in board.keys():
            if board[i] == ' ':
                board[i] = 'O'
                scor = minmax(board, depth + 1, False)
                board[i] = ' '

                a = (scor, bestscore)
                x = max(a)

                if x == scor:
                    bestscore = x


        return bestscore
    else :

        bestscore = 50
        for i in board.keys():
            if board[i] == ' ':
                board[i] = 'X'
                scor = minmax(board, depth + 1, True)
                board[i] = ' '

                a = (scor, bestscore)
                x = min(a)

                bestscore = x

        return bestscore


while outcomes() != True:
    outcomes()

    ai()
    printexample(board)
    printf(board)
    if outcomes() == True:
        exit(1)
    outcomes()
    sethuman()
    outcomes()
